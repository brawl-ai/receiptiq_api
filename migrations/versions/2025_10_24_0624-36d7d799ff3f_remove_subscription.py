"""remove subscription

Revision ID: 36d7d799ff3f
Revises: 34cbcf9b928f
Create Date: 2025-10-24 06:24:24.831017

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '36d7d799ff3f'
down_revision: Union[str, None] = '34cbcf9b928f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('payments_subscription_id_key'), 'payments', type_='unique')
    op.drop_constraint(op.f('payments_subscription_id_fkey'), 'payments', type_='foreignkey')
    op.drop_table('subscriptions')
    op.add_column('payments', sa.Column('subscription_code', sa.String(length=100), nullable=True))
    op.add_column('payments', sa.Column('subscription_plan_id', sa.UUID(), nullable=False))
    op.add_column('payments', sa.Column('subscription_start_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('payments', sa.Column('subscription_end_at', sa.DateTime(timezone=True), nullable=False))
    op.alter_column('payments', 'amount',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=15, decimal_return_scale=2),
               existing_nullable=False)
    op.alter_column('payments', 'fees',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=15, decimal_return_scale=2),
               existing_nullable=True)
    op.alter_column('payments', 'requested_amount',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=15, decimal_return_scale=2),
               existing_nullable=True)
    op.create_foreign_key(None, 'payments', 'subscription_plans', ['subscription_plan_id'], ['id'])
    op.drop_column('payments', 'subscription_id')
    op.alter_column('subscription_plans', 'price',
               existing_type=sa.REAL(),
               type_=sa.Float(precision=10, decimal_return_scale=2),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('subscription_plans', 'price',
               existing_type=sa.Float(precision=10, decimal_return_scale=2),
               type_=sa.REAL(),
               existing_nullable=False)
    op.add_column('payments', sa.Column('subscription_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.create_foreign_key(op.f('payments_subscription_id_fkey'), 'payments', 'subscriptions', ['subscription_id'], ['id'])
    op.create_unique_constraint(op.f('payments_subscription_id_key'), 'payments', ['subscription_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('payments', 'requested_amount',
               existing_type=sa.Float(precision=15, decimal_return_scale=2),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('payments', 'fees',
               existing_type=sa.Float(precision=15, decimal_return_scale=2),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('payments', 'amount',
               existing_type=sa.Float(precision=15, decimal_return_scale=2),
               type_=sa.REAL(),
               existing_nullable=False)
    op.drop_column('payments', 'subscription_end_at')
    op.drop_column('payments', 'subscription_start_at')
    op.drop_column('payments', 'subscription_plan_id')
    op.drop_column('payments', 'subscription_code')
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('subscription_plan_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('subscription_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('start_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subscription_plan_id'], ['subscription_plans.id'], name=op.f('subscriptions_subscription_plan_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('subscriptions_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriptions_pkey')),
    sa.UniqueConstraint('id', name=op.f('subscriptions_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
